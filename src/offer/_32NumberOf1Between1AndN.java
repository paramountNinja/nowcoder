package offer;
//@formatter:off
/**
 *                             _ooOoo_
 *                            o8888888o
 *                            88" . "88
 *                            (| -_- |)
 *                            O\  =  /O
 *                         ____/`---'\____
 *                       .'  \\|     |//  `.
 *                      /  \\|||  :  |||//  \
 *                     /  _||||| -:- |||||-  \
 *                     |   | \\\  -  /// |   |
 *                     | \_|  ''\---/''  |   |
 *                     \  .-\__  `-`  ___/-. /
 *                   ___`. .'  /--.--\  `. . __
 *                ."" '<  `.___\_<|>_/___.'  >'"".
 *               | | :  `- \`.;`\ _ /`;.`/ - ` : | |
 *               \  \ `-.   \_ __\ /__ _/   .-` /  /
 *          ======`-.____`-.___\_____/___.-`____.-'======
 *                             `=---='
 *          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 *                     佛祖保佑        永无BUG
 *
 * 描述：从1到n整数中1出现的次数
 */
 //@formatter:on
public class _32NumberOf1Between1AndN {
    //输入n，有O(logn)位，复杂度为O(n*logn)
    public int NumberOf1Between1AndN_Solution(int n) {
        if (n == 0) return 0;
        int count = 0;
        for (int i = 1; i <= n; i++) {
            int data = i;
            while (data != 0) {
                if (data % 10 == 1) count++;
                data = data / 10;
            }
        }
        return count;
    }

    //数的特性O(logn)
    public int NumberOf1Between1AndN_Solution1(int n) {
        if (n == 0) return 0;
        int count = 0;
        for (int i = 1; i <= n; i *= 10) {//位置点，求位置点对应的1的个数
            int highs = n / i;//高的几位数
            int lows = n % i;//低的几位数
            count += (highs + 8) / 10 * i + (highs % 10 == 1 ? lows + 1 : 0);
        }
        return count;
    }
}


//主要思路：设定整数点（如1、10、100等等）作为位置点i（对应n的各位、十位、百位等等），分别对每个数位上有多少包含1的点进行分析
//根据设定的整数位置，对n进行分割，分为两部分，高位n/i，低位n%i
//当i表示百位，且百位对应的数>=2,如n=31456,i=100，则a=314,b=56，此时百位为1的次数有a/10+1=32（最高两位0~31），每一次都包含100个连续的点，即共有(TrieTree/10+1)*100个点的百位为1
//当i表示百位，且百位对应的数为1，如n=31156,i=100，则a=311,b=56，此时百位对应的就是1，则共有a/10(最高两位0-30)次是包含100个连续点，当最高两位为31（即a=311），本次只对应局部点00~56，共b+1次，所有点加起来共有（TrieTree/10*100）+(b+1)，这些点百位对应为1
//当i表示百位，且百位对应的数为0,如n=31056,i=100，则a=310,b=56，此时百位为1的次数有a/10=31（最高两位0~30）
//综合以上三种情况，当百位对应0或>=2时，有(TrieTree+8)/10次包含所有100个点，还有当百位为1(TrieTree%10==1)，需要增加局部点b+1
//之所以补8，是因为当百位为0，则a/10==(TrieTree+8)/10，当百位>=2，补8会产生进位位，效果等同于(TrieTree/10+1)